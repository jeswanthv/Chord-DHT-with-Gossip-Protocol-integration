syntax = "proto3";

package chord;

// Message that represents a node's details
message NodeInfo {
    string ip = 1;
    int32 id = 2;
    int32 port = 3;
}

message FingerTableEntry {
    int32 i = 1;
    NodeInfo node = 2;
}

message FingerTable {
    repeated FingerTableEntry entries = 1;
}

message SuccessorListResponse {
    repeated NodeInfo successors = 1;
}

message FindSuccessorRequest {
    int32 id = 1;
}

message FindPredecessorRequest {
    int32 id = 1;
}

message Empty {}

service ChordService {

    // RPC to get the successor of a node
    rpc GetSuccessor(Empty) returns (NodeInfo) {}

    // RPC to get the successor list of a node
    rpc GetSuccessorList(Empty) returns (SuccessorListResponse) {}   

    // RPC to get the predecessor of a node
    rpc GetPredecessor(Empty) returns (NodeInfo) {}

    // RPC to find the successor of a node
    rpc FindSuccessor(FindSuccessorRequest) returns (NodeInfo) {}

    // RPC to find the predecessor of a node
    rpc FindPredecessor(FindPredecessorRequest) returns (NodeInfo) {}

    rpc InitFingerTable(NodeInfo) returns (FingerTable) {}
    
}