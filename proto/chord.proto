syntax = "proto3";

package chord;

// Message that represents a node's details
message PeerInfo {
    string ip = 1;
    int32 id = 2;
    string port = 3;
}

message FingerTableEntry {
    int32 start = 1;
    int32 interval = 2;
    PeerInfo node = 3;
}

message FingerTable {
    repeated FingerTableEntry entries = 1;
}

message SuccessorListResponse {
    repeated PeerInfo successors = 1;
}

message HashEntry {
    int32 hashID = 1;
    string key = 2;
    string val = 3;
}

message ReplicateRequest {
    repeated HashEntry entries = 1;
}

message ReplicateResponse {
    ReturnStatusCode ret = 1;
}

message StatusResponse {
    int32 id = 1;
    string ip = 2;
    int32 pred_id = 3;
    string pred_ip = 4;
    repeated int32 suclist_id = 5;
    repeated string suclist_ip = 6;
    repeated int32 finger_id = 7;
    repeated string finger_ip = 8;
}

enum ReturnStatusCode {
    SUCCESS = 0;
    FAILURE = 1;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    ReturnStatusCode status = 1;
    string response = 2;
    int32 PeerID = 3;
    string PeerIP = 4;
}

message PutRequest {
    string key = 1;
    string value = 2;
}

message PutResponse {
    ReturnStatusCode ret = 1;
    int32 PeerID = 2;
    string PeerIP = 3;
}
message StabilizeResponse {

}

message EmptyRequest {
}

// service ChordService {

//     // RPC to get the successor of a node
//     // rpc GetSuccessor(PeerInfo) returns (PeerInfo) {}

//     rpc GetSuccessor(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the successor list of a node
//     rpc GetSuccessorList(PeerInfo) returns (SuccessorListResponse) {}


//     // RPC to get the predecessor of a node
//     rpc GetPredecessor(PeerInfo) returns (PeerInfo) {}

//     // RPC to find the successor of a node
//     rpc FindSuccessor(PeerInfo) returns (PeerInfo) {}

//     // RPC to find the predecessor of a node
//     rpc FindPredecessor(PeerInfo) returns (PeerInfo) {}

//     // RPC to notify a node of a new predecessor
//     rpc Notify(PeerInfo) returns (PeerInfo) {}

//     // RPC to check if a node is alive
//     rpc Ping(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the finger table of a node
//     rpc GetFingerTable(PeerInfo) returns (PeerInfo) {}

//     // RPC to update the finger table of a node
//     rpc UpdateFingerTable(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the closest preceding finger of a node
//     rpc ClosestPrecedingFinger(PeerInfo) returns (PeerInfo) {}

//     // RPC to update the successor list of a node
//     rpc UpdateSuccessorList(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the predecessor list of a node
//     rpc GetPredecessorList(PeerInfo) returns (PeerInfo) {}

//     // RPC to update the predecessor list of a node
//     rpc UpdatePredecessorList(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the successor list of a node
//     rpc GetFingerTableList(PeerInfo) returns (PeerInfo) {}

//     // RPC to update the successor list of a node
//     rpc UpdateFingerTableList(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the predecessor list of a node
//     rpc GetSuccessorListList(PeerInfo) returns (PeerInfo) {}

//     // RPC to update the predecessor list of a node
//     rpc UpdateSuccessorListList(PeerInfo) returns (PeerInfo) {}

//     // RPC to get the successor list of a node
//     rpc GetPredecessorListList(PeerInfo) returns (PeerInfo) {}
// }

service ChordService {

    // RPC to get the successor of a node
    rpc GetSuccessor (PeerInfo) returns (PeerInfo) {}

    // RPC to get the successor list of a node
    rpc GetSuccessorList (PeerInfo) returns (SuccessorListResponse) {}

    // RPC to get the predecessor of a node
    rpc GetPredecessor (PeerInfo) returns (PeerInfo) {}

    // RPC to find the successor of a node
    rpc FindSuccessor (PeerInfo) returns (PeerInfo) {}

    // RPC to find the predecessor of a node
    rpc FindPredecessor (PeerInfo) returns (PeerInfo) {}

    //RPC to Replicate Entries of a node
    rpc ReplicateEntries (ReplicateRequest) returns (ReplicateResponse) {}

    //RPC to get Node status
    rpc PeerStatus (PeerInfo) returns (StatusResponse) {}

    //RPC to get value of a key
    rpc GetValue (GetRequest) returns (GetResponse) {}

    //RPC to insert a new value
    rpc PutValue (PutRequest) returns (PutResponse) {}

    //RPC to start Stabilization Protocol
    rpc Stabilize (EmptyRequest) returns (StabilizeResponse) {}
}