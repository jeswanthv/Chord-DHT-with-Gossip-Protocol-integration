# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.find_successor = channel.unary_unary(
                '/server.Server/find_successor',
                request_serializer=server__pb2.FindSucRequest.SerializeToString,
                response_deserializer=server__pb2.FindSucResponse.FromString,
                )
        self.live_predecessor = channel.unary_unary(
                '/server.Server/live_predecessor',
                request_serializer=server__pb2.PredecessorRequest.SerializeToString,
                response_deserializer=server__pb2.PredecessorResponse.FromString,
                )
        self.find_succlist = channel.unary_unary(
                '/server.Server/find_succlist',
                request_serializer=server__pb2.FindSucclistRequest.SerializeToString,
                response_deserializer=server__pb2.FindSucclistResponse.FromString,
                )
        self.find_predecessor = channel.unary_unary(
                '/server.Server/find_predecessor',
                request_serializer=server__pb2.EmptyRequest.SerializeToString,
                response_deserializer=server__pb2.FindPredResponse.FromString,
                )
        self.rectify = channel.unary_unary(
                '/server.Server/rectify',
                request_serializer=server__pb2.RectifyRequest.SerializeToString,
                response_deserializer=server__pb2.RectifyResponse.FromString,
                )
        self.get_node_status = channel.unary_unary(
                '/server.Server/get_node_status',
                request_serializer=server__pb2.EmptyRequest.SerializeToString,
                response_deserializer=server__pb2.NodeStatus.FromString,
                )
        self.replicate_entries = channel.unary_unary(
                '/server.Server/replicate_entries',
                request_serializer=server__pb2.ReplicateRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicateResponse.FromString,
                )
        self.get = channel.unary_unary(
                '/server.Server/get',
                request_serializer=server__pb2.GetRequest.SerializeToString,
                response_deserializer=server__pb2.GetResponse.FromString,
                )
        self.put = channel.unary_unary(
                '/server.Server/put',
                request_serializer=server__pb2.PutRequest.SerializeToString,
                response_deserializer=server__pb2.PutResponse.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def find_successor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def live_predecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_succlist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_predecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rectify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_node_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replicate_entries(self, request, context):
        """defined by ourselves
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def put(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'find_successor': grpc.unary_unary_rpc_method_handler(
                    servicer.find_successor,
                    request_deserializer=server__pb2.FindSucRequest.FromString,
                    response_serializer=server__pb2.FindSucResponse.SerializeToString,
            ),
            'live_predecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.live_predecessor,
                    request_deserializer=server__pb2.PredecessorRequest.FromString,
                    response_serializer=server__pb2.PredecessorResponse.SerializeToString,
            ),
            'find_succlist': grpc.unary_unary_rpc_method_handler(
                    servicer.find_succlist,
                    request_deserializer=server__pb2.FindSucclistRequest.FromString,
                    response_serializer=server__pb2.FindSucclistResponse.SerializeToString,
            ),
            'find_predecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.find_predecessor,
                    request_deserializer=server__pb2.EmptyRequest.FromString,
                    response_serializer=server__pb2.FindPredResponse.SerializeToString,
            ),
            'rectify': grpc.unary_unary_rpc_method_handler(
                    servicer.rectify,
                    request_deserializer=server__pb2.RectifyRequest.FromString,
                    response_serializer=server__pb2.RectifyResponse.SerializeToString,
            ),
            'get_node_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_node_status,
                    request_deserializer=server__pb2.EmptyRequest.FromString,
                    response_serializer=server__pb2.NodeStatus.SerializeToString,
            ),
            'replicate_entries': grpc.unary_unary_rpc_method_handler(
                    servicer.replicate_entries,
                    request_deserializer=server__pb2.ReplicateRequest.FromString,
                    response_serializer=server__pb2.ReplicateResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=server__pb2.GetRequest.FromString,
                    response_serializer=server__pb2.GetResponse.SerializeToString,
            ),
            'put': grpc.unary_unary_rpc_method_handler(
                    servicer.put,
                    request_deserializer=server__pb2.PutRequest.FromString,
                    response_serializer=server__pb2.PutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def find_successor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/find_successor',
            server__pb2.FindSucRequest.SerializeToString,
            server__pb2.FindSucResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def live_predecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/live_predecessor',
            server__pb2.PredecessorRequest.SerializeToString,
            server__pb2.PredecessorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_succlist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/find_succlist',
            server__pb2.FindSucclistRequest.SerializeToString,
            server__pb2.FindSucclistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_predecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/find_predecessor',
            server__pb2.EmptyRequest.SerializeToString,
            server__pb2.FindPredResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rectify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/rectify',
            server__pb2.RectifyRequest.SerializeToString,
            server__pb2.RectifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_node_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/get_node_status',
            server__pb2.EmptyRequest.SerializeToString,
            server__pb2.NodeStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replicate_entries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/replicate_entries',
            server__pb2.ReplicateRequest.SerializeToString,
            server__pb2.ReplicateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/get',
            server__pb2.GetRequest.SerializeToString,
            server__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/put',
            server__pb2.PutRequest.SerializeToString,
            server__pb2.PutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
